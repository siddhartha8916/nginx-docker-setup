services:
  node-backend-1:
    build: ./backend
    container_name: node-backend-1
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgres://postgres:postgrespassword@postgres-db:5432/users_db
    command: ["dist/index.js"]

  node-backend-2:
    build: ./backend
    container_name: node-backend-2
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgres://postgres:postgrespassword@postgres-db:5432/users_db
    command: ["dist/index.js"]

  node-backend-3:
    build: ./backend
    container_name: node-backend-3
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgres://postgres:postgrespassword@postgres-db:5432/users_db
    command: ["dist/index.js"]

  backend-load-balancer:
    image: nginx:alpine
    container_name: backend-load-balancer
    volumes:
      - ./nginx/backend/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - node-backend-1
      - node-backend-2
      - node-backend-3
    command: ["nginx", "-g", "daemon off;"]

  react-frontend:
    build: ./frontend
    container_name: react-frontend
    volumes:
      - ./nginx/frontend/default.conf:/etc/nginx/conf.d/default.conf:ro 
    ports:
      - "3000:80"
    depends_on:
      - backend-load-balancer

  postgres-db:
    image: postgres:16.4
    container_name: postgres-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgrespassword
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro

volumes:
  pgdata: